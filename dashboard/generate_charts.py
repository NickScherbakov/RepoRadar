import requests
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from datetime import datetime, timedelta
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
REPORADAR_URL = os.getenv('REPORADAR_URL', 'https://your-reporadar-app.herokuapp.com')
CHARTS_DIR = 'charts'

def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ RepoRadar."""
    try:
        response = requests.get(f'{REPORADAR_URL}/stats', timeout=10)
        response.raise_for_status()
        return response.json()['data']
    except Exception as e:
        print(f"Error getting stats: {e}")
        return None

def get_transfers():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–∞—Ö."""
    try:
        response = requests.get(f'{REPORADAR_URL}/export', timeout=10)
        response.raise_for_status()
        return response.json()['data']
    except Exception as e:
        print(f"Error getting transfers: {e}")
        return []

def generate_overview_chart(stats):
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–π –æ–±–∑–æ—Ä."""
    if not stats:
        return

    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(12, 8))
    fig.suptitle('RepoRadar Dashboard - –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤', fontsize=16)

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    labels = ['–í—Å–µ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤', '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π', '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤']
    values = [stats.get('total_transfers', 0), stats.get('unique_buyers', 0), stats.get('unique_sellers', 0)]
    ax1.bar(labels, values, color=['#1f77b4', '#ff7f0e', '#2ca02c'])
    ax1.set_title('–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    ax1.tick_params(axis='x', rotation=45)

    # –¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
    if 'top_buyers' in stats and stats['top_buyers']:
        buyers = stats['top_buyers'][:10]
        names = [b['new_owner'][:15] + '...' if len(b['new_owner']) > 15 else b['new_owner'] for b in buyers]
        counts = [b['count'] for b in buyers]
        ax2.barh(names[::-1], counts[::-1], color='#1f77b4')
        ax2.set_title('–¢–æ–ø 10 –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π')

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∑–≤–µ–∑–¥–∞–º
    transfers = get_transfers()
    if transfers:
        stars = [t.get('stars', 0) for t in transfers if t.get('stars', 0) > 0]
        if stars:
            ax3.hist(stars, bins=20, color='#ff7f0e', alpha=0.7)
            ax3.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∑–≤–µ–∑–¥–∞–º')
            ax3.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥')
            ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤')

    # –î–∏–Ω–∞–º–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    if transfers:
        dates = []
        for t in transfers:
            if 'created_at' in t:
                try:
                    date = datetime.fromisoformat(t['created_at'].replace('Z', '+00:00'))
                    dates.append(date.date())
                except:
                    pass

        if dates:
            date_counts = pd.Series(dates).value_counts().sort_index()
            ax4.plot(date_counts.index[-30:], date_counts.values[-30:], color='#2ca02c')
            ax4.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)')
            ax4.tick_params(axis='x', rotation=45)

    plt.tight_layout()
    os.makedirs(CHARTS_DIR, exist_ok=True)
    plt.savefig(f'{CHARTS_DIR}/overview.png', dpi=150, bbox_inches='tight')
    plt.close()

def generate_language_chart():
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."""
    transfers = get_transfers()
    if not transfers:
        return

    languages = {}
    for t in transfers:
        lang = t.get('language', 'Unknown')
        if lang:
            languages[lang] = languages.get(lang, 0) + 1

    if languages:
        top_langs = sorted(languages.items(), key=lambda x: x[1], reverse=True)[:10]
        langs, counts = zip(*top_langs)

        plt.figure(figsize=(10, 6))
        plt.bar(langs, counts, color='#9467bd')
        plt.title('–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —è–∑—ã–∫–∏ –≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö')
        plt.xticks(rotation=45, ha='right')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤')
        plt.tight_layout()
        plt.savefig(f'{CHARTS_DIR}/languages.png', dpi=150, bbox_inches='tight')
        plt.close()

def update_readme():
    """–û–±–Ω–æ–≤–∏—Ç—å README.md —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    stats = get_stats()
    if not stats:
        return

    readme_content = f"""# NickScherbakov

## üìä RepoRadar Dashboard

–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ GitHub - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.

### üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- **–í—Å–µ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤**: {stats.get('total_transfers', 0)}
- **–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π**: {stats.get('unique_buyers', 0)}
- **–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤**: {stats.get('unique_sellers', 0)}

### üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
![–û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞](charts/overview.png)

### üè∑Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —è–∑—ã–∫–∏
![–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è](charts/languages.png)

### üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
| –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π | –°—Ç–∞—Ä—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü | –ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü | –ó–≤–µ–∑–¥—ã | –î–∞—Ç–∞ |
|-------------|----------------|----------------|--------|------|
"""

    transfers = get_transfers()[:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
    for t in transfers:
        repo = t.get('repo', 'N/A')
        old_owner = t.get('old_owner', 'N/A')
        new_owner = t.get('new_owner', 'N/A')
        stars = t.get('stars', 0)
        date = t.get('created_at', 'N/A')[:10] if t.get('created_at') else 'N/A'
        readme_content += f"| {repo} | {old_owner} | {new_owner} | {stars} | {date} |\n"

    readme_content += f"\n*Dashboard –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}*"

    with open('README.md', 'w', encoding='utf-8') as f:
        f.write(readme_content)

if __name__ == '__main__':
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
    stats = get_stats()
    if stats:
        generate_overview_chart(stats)
        generate_language_chart()
        update_readme()
        print("–ì–æ—Ç–æ–≤–æ!")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ RepoRadar")